input AuthenticateInput {
  email: String!
  password: String!
}

type AuthenticatePayload {
  success: Boolean!
  errorMessage: String
  authToken: String
}

input UnauthenticateInput {
  # Token is optional because the server will first attempt to read the token from a cookie, if present
  token: String
}

type UnauthenticatePayload {
  success: Boolean!
  errorMessage: String
}

input CreateUserInput {
  uuid: String!
  email: String!
  password: String!
}

type CreateUserPayload {
  success: Boolean!
  errorMessage: String
  userID: ID
  authToken: String
}

input CreateRouteInput {
  forwardTo: String!
  inboundToMaskedEmailID: ID!
  expires: Int
}

# A Route can not be deleted, but its forwardTo property can be cleared at a user's request
type Route {
  id: ID!
  # If deleted is true, then forwardTo will contain a random string
  forwardTo: String
  inboundTo: MaskedEmail!
  expires: Int
  disabled: Boolean!
  deleted: Boolean!
}

type CreateRoutePayload {
  success: Boolean!
  errorMessage: String
  route: Route
}
type DeleteUserPayload {
  success: Boolean!
  errorMessage: String
  authToken: String
}

input DeleteRouteInput {
  id: ID!
}

type DeleteRoutePayload {
  success: Boolean!
  errorMessage: String
}

input UpdateRouteInput {
  id: ID!
  forwardTo: String
  inboundToMaskedEmailID: ID!
  expires: Int
}

type UpdateRoutePayload {
  success: Boolean!
  errorMessage: String
}

# Once created, a MaskedEmail is reserved forever so that it cannot be used by another user
# A MaskedEmail cannot be deleted, but a Route.forwardTo can be deleted because it's important for users' data rights.
type MaskedEmail {
  id: ID!
  # OwnerUserID could belong to a deleted user
  ownerUserID: ID!
  # For x+y@1nt.email, "x" is the base
  base: String!
  # For x+y@1nt.email, "1nt.email" is the domain
  domain: String!
}

# A User can't be deleted, but its email can be cleared at a user's request
type User {
  id: ID!
  email: String
  # routes: [Route!]!
  # maskedEmails: [MaskedEmail!]!
}

type Query {
  me: User!
  ping: String!
}

type Mutation {
  authenticate(input: AuthenticateInput!): AuthenticatePayload!
  unauthenticate(input: UnauthenticateInput): UnauthenticatePayload!

  createUser(input: CreateUserInput!): CreateUserPayload!

  # createRoute(input: CreateRouteInput!): CreateRoutePayload!
  # deleteRoute(input: DeleteRouteInput!): DeleteRoutePayload!
  # updateRoute(input: UpdateRouteInput!): UpdateRoutePayload!
}
