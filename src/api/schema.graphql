input AuthenticateInput {
  username: String!
}

type AuthenticatePayload {
  success: Boolean!
  errorMessage: String
  authToken: String
}

input CreateUserInput {
  uuid: String!
  username: String!
  email: String!
}

type CreateUserPayload {
  success: Boolean!
  errorMessage: String
  userID: String
  authToken: String
}

type User {
  id: String!
  username: String!
  email: String!
  routes: [Route!]!
}

type MaskedEmail {
  base: String!
  domain: String!
  expires: Int
  deleted: Boolean
}

type Route {
  from: MaskedEmail!
  to: String!
}

type Query {
  me: User!
  ping: String!
}

type Mutation {
  authenticate(input: AuthenticateInput!): AuthenticatePayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
}
