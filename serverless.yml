service: email-forwarder-api

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage}
  logRetentionInDays: 5
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"
    - Effect: "Allow"
      Action: "ses:SendEmail"
      Resource: "*"
    - Effect: "Allow"
      Action: "rds:*"
      Resource: ["arn:aws:rds:us-east-1:*:*"]
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::email-forwarder-inbound-emails/*"
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: "arn:aws:sns:us-east-1:*:pending-event-topic"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
      Resource: "arn:aws:dynamodb:us-east-1:${self:custom.AWS_ACCOUNT.${self:provider.stage}}:table/*"

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    keepOutputDirectory: true
    packager: "yarn"
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk
  JWT_SECRET: ${file(./secrets-${self:provider.stage}.yml):jwt_secret}
  STRIPE_PRIVATE_KEY: ${file(./secrets-${self:provider.stage}.yml):stripe_private_key}
  STRIPE_ENDPOINT_SECRET: ${file(./secrets-${self:provider.stage}.yml):stripe_endpoint_secret}
  WEB_APP_BASE_URL:
    local: https://localhost:4200
    dev: https://app.mailmasker-dev.com
    prod: https://app.mailmasker.com
  WEB_APP_DOMAIN:
    local: localhost
    dev: app.mailmasker-dev.com
    prod: app.mailmasker.com
  API_BASE_URL:
    local: https://localhost:4201
    dev: https://api.mailmasker-dev.com/graphql
    prod: https://api.mailmasker.com/graphql
  API_DOMAIN:
    local: localhost
    dev: api.mailmasker-dev.com
    prod: api.mailmasker.com
  ASSETS_BASE_URL:
    local: https://localhost:4202/transactional-email # we don't yet run the marketing site locally, so this is not valid
    dev: https://www.mailmasker-dev.com/transactional-email
    prod: https://www.mailmasker.com/transactional-email
  AWS_ACCOUNT:
    local: ""
    dev: 747558615165
    prod: 726929401065
  CERTIFICATE_ARN:
    local: ""
    dev: "arn:aws:acm:us-east-1:747558615165:certificate/924444b9-8071-4a3d-b0ec-091850a6dad3"
    prod: "arn:aws:acm:us-east-1:726929401065:certificate/b2d1e024-6f01-4ee0-a0c6-90f292323681"
  MAIL_DOMAINS:
    # Comma-separated list of domains we support
    local: "mailmasker-local.com"
    dev: "mailmasker-dev.com"
    prod: "mailmasker.com"
  AWS_ACCOUNT_ID:
    local: ""
    dev: "747558615165"
    prod: "726929401065"
  POSTGRES_DB_HOST: ${file(./secrets-${self:provider.stage}.yml):postgres_db_host}
  POSTGRES_DB_USERNAME: ${file(./secrets-${self:provider.stage}.yml):postgres_db_username}
  POSTGRES_DB_PASSWORD: ${file(./secrets-${self:provider.stage}.yml):postgres_db_password}
  PENDING_EVENTS_SNS_ARN:
    local: ""
    dev: "arn:aws:sns:us-east-1:747558615165:pending-event-topic"
    prod: "arn:aws:sns:us-east-1:726929401065:pending-event-topic"
  dynamodb:
    stages:
      - local
    start:
      migrate: true
      port: 8000
      inMemory: true
  customDomain:
    domainName: ${self:custom.API_DOMAIN.${self:provider.stage}}
    # stage: ${self:provider.stage}
    # basePath: graphql
    certificateArn: ${self:custom.CERTIFICATE_ARN.${self:provider.stage}}
    createRoute53Record: true
    endpointType: "edge"
    securityPolicy: tls_1_2

package:
  individually: true
  include:
    - src/api/schema/schema.graphql

functions:
  graphql:
    handler: graphql-handler.handler
    memorySize: 128
    events:
      - http:
          path: graphql
          method: post
          cors:
            origin: ${self:custom.WEB_APP_BASE_URL.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: true
    environment:
      JWT_SECRET: ${self:custom.JWT_SECRET}
      STRIPE_PRIVATE_KEY: ${self:custom.STRIPE_PRIVATE_KEY}
      WEB_APP_BASE_URL: ${self:custom.WEB_APP_BASE_URL.${self:provider.stage}}
      API_DOMAIN: ${self:custom.API_DOMAIN.${self:provider.stage}}
      API_BASE_URL: ${self:custom.API_BASE_URL.${self:provider.stage}}
      ASSETS_BASE_URL: ${self:custom.ASSETS_BASE_URL.${self:provider.stage}}
      S_STAGE: ${self:provider.stage}
      MAIL_DOMAINS: ${self:custom.MAIL_DOMAINS.${self:provider.stage}}
      DAL_ENVIRONMENT: email-forwarder
      BUGSNAG_RELEASE_STAGE: ${self:provider.stage}

  playground:
    handler: playground-handler.handler
    memorySize: 128
    events:
      - http:
          path: playground
          method: get

  stripe:
    handler: src/stripe-callbacks/stripe-callbacks-handler.handler
    memorySize: 128
    events:
      - http:
          path: stripe-callbacks
          method: post
    environment:
      JWT_SECRET: ${self:custom.JWT_SECRET}
      STRIPE_PRIVATE_KEY: ${self:custom.STRIPE_PRIVATE_KEY}
      STRIPE_ENDPOINT_SECRET: ${self:custom.STRIPE_ENDPOINT_SECRET}
      WEB_APP_BASE_URL: ${self:custom.WEB_APP_BASE_URL.${self:provider.stage}}
      API_DOMAIN: ${self:custom.API_DOMAIN.${self:provider.stage}}
      S_STAGE: ${self:provider.stage}
      DAL_ENVIRONMENT: email-forwarder
      BUGSNAG_RELEASE_STAGE: ${self:provider.stage}

  event:
    handler: src/event/event-handler.handler
    memorySize: 128
    events:
      - http:
          path: event
          method: post
    environment:
      S_STAGE: ${self:provider.stage}
      BUGSNAG_RELEASE_STAGE: ${self:provider.stage}
      POSTGRES_DB_HOST: ${self:custom.POSTGRES_DB_HOST}
      POSTGRES_DB_USERNAME: ${self:custom.POSTGRES_DB_USERNAME}
      POSTGRES_DB_PASSWORD: ${self:custom.POSTGRES_DB_PASSWORD}
      PENDING_EVENTS_SNS_ARN: ${self:custom.PENDING_EVENTS_SNS_ARN.${self:provider.stage}}

  processEvent:
    handler: src/process-event/process-event-handler.handler
    memorySize: 128
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${self:custom.AWS_ACCOUNT_ID.${self:provider.stage}}:pending-event-queue
          batchSize: 1 # only process 1 email at a time (because otherwise, failure marks all of the queued items for retry, which makes it more likely we'll send the same email multiple times!)
    environment:
      JWT_SECRET: ${self:custom.JWT_SECRET}
      S_STAGE: ${self:provider.stage}
      BUGSNAG_RELEASE_STAGE: ${self:provider.stage}
      POSTGRES_DB_HOST: ${self:custom.POSTGRES_DB_HOST}
      POSTGRES_DB_USERNAME: ${self:custom.POSTGRES_DB_USERNAME}
      POSTGRES_DB_PASSWORD: ${self:custom.POSTGRES_DB_PASSWORD}
      PENDING_EVENTS_SNS_ARN: ${self:custom.PENDING_EVENTS_SNS_ARN.${self:provider.stage}}
