service: email-forwarder-api

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"
    - Effect: "Allow"
      Action: "ses:SendEmail"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::email-forwarder-inbound-emails/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "arn:aws:dynamodb:us-east-1:${self:custom.AWS_ACCOUNT.${self:provider.stage}}:table/*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-domain-manager

custom:
  JWT_SECRET: ${file(jwt_secret.txt)}
  WEB_APP_BASE_URL:
    local: https://localhost:4200
    dev: https://app.mailmasker-dev.com
    prod: https://app.mailmasker.com
  WEB_APP_DOMAIN:
    local: localhost
    dev: app.mailmasker-dev.com
    prod: app.mailmasker.com
  API_BASE_URL:
    local: https://localhost:4201
    dev: https://api.mailmasker-dev.com/graphql
    prod: https://api.mailmasker.com/graphql
  API_DOMAIN:
    local: localhost
    dev: api.mailmasker-dev.com
    prod: api.mailmasker.com
  AWS_ACCOUNT:
    local: ""
    dev: 747558615165
    prod: 726929401065
  CERTIFICATE_ARN:
    local: ""
    dev: "arn:aws:acm:us-east-1:747558615165:certificate/924444b9-8071-4a3d-b0ec-091850a6dad3"
    prod: "arn:aws:acm:us-east-1:726929401065:certificate/b2d1e024-6f01-4ee0-a0c6-90f292323681"
  dynamodb:
    stages:
      - local
    start:
      migrate: true
      port: 8000
      inMemory: true
  customDomain:
    domainName: ${self:custom.API_DOMAIN.${self:provider.stage}}
    # stage: ${self:provider.stage}
    # basePath: graphql
    certificateArn: ${self:custom.CERTIFICATE_ARN.${self:provider.stage}}
    createRoute53Record: true
    endpointType: "edge"
    securityPolicy: tls_1_2

package:
  include:
    - src/api/schema/schema.graphql

functions:
  graphql:
    handler: index.handler
    events:
      - http:
          path: graphql
          method: post
          cors:
            origin: ${self:custom.WEB_APP_BASE_URL.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: true
    environment:
      JWT_SECRET: ${self:custom.JWT_SECRET}
      WEB_APP_BASE_URL: ${self:custom.WEB_APP_BASE_URL.${self:provider.stage}}
      API_DOMAIN: ${self:custom.API_DOMAIN.${self:provider.stage}}
      API_BASE_URL: ${self:custom.API_BASE_URL.${self:provider.stage}}
      S_STAGE: ${self:provider.stage}
  playground:
    handler: index.handler
    events:
      - http:
          path: playground
          method: get
